import uproot
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import pandas as pd

gmass = np.array([])
gtau =np.array([])
limit_jeteff_e = []
limit_jeteff_h = []

for m_g in np.arange(1000,1300,100):

  x= np.arange(2.5, 3.0, 0.1)

  for n in (np.round_(x,decimals=1)):

     dataroot = uproot.open('/data3/jayashri/root_files/delphes_generated/eff_plot_root_files/delphes_{}_{}_out.root'.format(m_g,n))
     dataroot.keys()
     data_tree = dataroot['Delphes']
     mass,pdgid,status,pT,e,vtx_x,vtx_y,pz = data_tree.arrays(['Particle.Mass','Particle.PID','Particle.Status','Particle.PT','Particle.E','Particle.X','Particle.Y','Particle.Pz'], outputtype=tuple)
     #met_d = data_tree["MissingET.MET"].array()
     #met_d = met_d.flatten()

     status_sel = abs(status) == 106
     id_sel = abs(pdgid) == 1000021
     vtx_trans = np.hypot (vtx_x,vtx_y)
     p_abs = np.hypot (pT,pz)
     vtx_trans_sel = vtx_trans[status_sel & id_sel]  # selecting gluinos of status 106
     pT_sel = pT[status_sel & id_sel]
     p_abs_sel =  p_abs[status_sel & id_sel]
     mass_sel = mass[status_sel & id_sel]
     length = int(len(mass_sel.flatten())/2)
     #metsel = met_d>300
  #To find beta
     sq_e = m_g*m_g + (p_abs_sel)**2
     beta = np.sqrt(1-(m_g*m_g/sq_e))
     delay = vtx_trans_sel*((1/beta)-1)*(p_abs_sel/pT_sel)  #units mm/c
     delay = np.reshape(np.array(delay.flatten()),(length,2))
     delay_resol =np.add(delay,np.random.normal(0,299.79,size=(length,2)))
     vtx_trans_sel = np.reshape(np.array(vtx_trans_sel.flatten()),(length,2))
     r_ecal = 1600 #mm
     r_hcal = 2876 #mm
     tsel_ecal = delay_resol > 899.37    # 3/0.0033 (since 3*299.79 = 899.37 mm/c)
     tsel_hcal = delay_resol > 1498.95      #5/0.0033
     rsel_ecal = vtx_trans_sel < r_ecal
     rsel_hcal = vtx_trans_sel < r_hcal

# onlyjettime
     ecal_jettime = ((rsel_ecal[:,0] & tsel_ecal[:,0]) | (rsel_ecal[:,1] & tsel_ecal[:,1]))
     hcal_jettime =(((rsel_hcal[:,0] & tsel_hcal[:,0]) | (rsel_hcal[:,1] & tsel_hcal[:,1])) |((rsel_ecal[:,0] & tsel_ecal[:,0]) | (rsel_ecal[:,1] & tsel_ecal[:,1])))
     mass_sel = np.reshape(np.array(mass_sel.flatten()),(length,2))
     gmass_e_j = mass_sel[ecal_jettime]  #mass is stored in MeV units in delphes root file
     gmass_h_j = mass_sel[hcal_jettime]

     m_arr = np.full(shape=len(gmass_h_j.flatten()),fill_value=m_g,dtype=np.int)
     tau_arr = np.full(shape=len(gmass_h_j.flatten()),fill_value=n)
     gmass = np.append(gmass, m_arr)
     gtau = np.append(gtau,tau_arr)

     eff_e_j = len(gmass_e_j.flatten())#*0.5*0.001
     eff_h_j = len(gmass_h_j.flatten())#*0.5*0.001

     cls_lim = 6 # 3*2 When the included efficiency is 50%
     lum = 137   #fb^-1
     sigma_lim_1600 = cls_lim/(lum*(eff_e_j)+0.0001)
     sigma_lim_2876 = cls_lim/(lum*(eff_h_j)+0.0001) # Addition of 0.0001 to avoid division by zero
     limit_jeteff_e.append(sigma_lim_1600)
     limit_jeteff_h.append(sigma_lim_2876)

#2d limit plot
#using hcal jeteff only (no met)

xbin = np.logspace(2.45, 3.05, num=7)
ybin = np.linspace(950, 1350, 5)
#w_h = np.repeat(0.001, len(gmass))
#w_h = limit_jeteff_h

counts, _, _ = np.histogram2d(gtau, gmass, bins=(xbin,ybin) ) ### I am stuck here. I could not give properr weights and plot it. Without weights the counts returns 0

#Also mpl.colors.LogNorm() shows error saying that the minimum value can't be negative.
norm = mpl.colors.Normalize()) # So, I am trying with this instead 
